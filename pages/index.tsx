import Head from "next/head";
import WordleGame from "../components/WordleGame/Wordle";
import { useQuery } from "@tanstack/react-query";
import axios, { AxiosResponse } from "axios";
import { useEffect, useState } from "react";
import { NextPage } from "next";
import styles from "../styles/Home.module.css";
import getRandom from "../helpers/getRandom";
import Modal from "../components/Modal/Modal";
import { gameStateEnum, IWord } from "../types/types";
import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import Keyboard from "../components/Keyboard/Keyboard";

const Home: NextPage = () => {
  const [solution, setSolution] = useState<string | null>(null);
  const [words, setWords] = useState<IWord[]>([...Array(5)]);
  const [gameState, setGameState] = useState<gameStateEnum>(
    gameStateEnum.start
  );
  const [gameOverModalOpen, setGameOverModalOpen] = useState<boolean>(false);
  const [finishModalOpen, setFinishModalOpen] = useState<boolean>(false);
  const { error, isLoading, data } = useQuery(["words"], () =>
    axios
      .get("https://wordle-db.onrender.com/wordleWords")
      .then((res: AxiosResponse) => res.data)
  );

  const restartGame = async (): Promise<void> => {
    const word: string = getRandom(data);
    setSolution(word);
    setWords([...Array(5)]);
    setFinishModalOpen(false);
    setGameOverModalOpen(false);
    setGameState(gameStateEnum.inProgress);
  };

  // Initial game depends on async words data load
  useEffect(() => {
    data && restartGame();
  }, [data]);

  useEffect(() => {
    if (gameState === gameStateEnum.start) {
      data && restartGame();
    }
    if (gameState === gameStateEnum.finishWin) {
      setFinishModalOpen(true);
    }
    if (gameState === gameStateEnum.finishLose) {
      setGameOverModalOpen(true);
    }
  }, [gameState]);

  if (error)
    return (
      <div className={styles.info}>
        <h2 className={styles["error-text"]}>
          Oopsie! We couldn&apos;t get words for you.
        </h2>
        <p className={styles.text}>Please try again later</p>
      </div>
    );

  if (isLoading)
    return (
      <div className={styles["spinner-box"]}>
        <img src="/circle-notch-solid.svg" className={styles.spinner} />
        <p className={styles.text}>Loading</p>
      </div>
    );

  return (
    <>
      <Head>
        <title>Wordle</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {gameState != gameStateEnum.start && (
          <>
            <WordleGame
              words={words}
              setWords={setWords}
              dictionary={data}
              solution={solution}
              gameState={gameState}
              setGameState={setGameState}
            />
            <Keyboard words={words} />
          </>
        )}
      </main>

      {finishModalOpen && (
        <Modal setOpen={setFinishModalOpen} delay={1500}>
          <h1>Congratulations!</h1>
          <p>You solved this puzzle.</p>
          <p>One more round?</p>
          <button onClick={() => setGameState(gameStateEnum.start)}>
            New game
          </button>
        </Modal>
      )}

      {gameOverModalOpen && (
        <Modal setOpen={setFinishModalOpen} delay={1500}>
          <h1>Game Over!</h1>
          <p>Better luck next time.</p>
          <p>
            The solution is: <b>{solution}</b>
          </p>
          <p>One more round?</p>
          <button onClick={() => setGameState(gameStateEnum.start)}>
            New game
          </button>
        </Modal>
      )}
      <ToastContainer />
    </>
  );
};

export default Home;
